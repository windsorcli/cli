name: 'Install Tools'
description: 'Installs the tools needed for the integration tests'
inputs:
    AQUA_DISABLE_COSIGN:
      description: 'Disable cosign verification'
      required: false
      default: 'true'
    AQUA_DISABLE_SLSA:
      description: 'Disable SLSA verification'
      required: false
      default: 'true'
    AQUA_LOG_LEVEL:
      description: 'Log level for Aqua'
      required: false
      default: 'info'

permissions:
  contents: read

runs:
  using: 'composite'

  steps:      
      - name: Install Aqua on Linux/macOS
        if: ${{ !startsWith(github.job, 'windows') && !contains(github.workspace, ':\\') }}
        env: 
          AQUA_DISABLE_COSIGN: ${{ inputs.AQUA_DISABLE_COSIGN }}
          AQUA_DISABLE_SLSA: ${{ inputs.AQUA_DISABLE_SLSA }}
          AQUA_LOG_LEVEL: ${{ inputs.AQUA_LOG_LEVEL }}
        uses: aquaproj/aqua-installer@e2d0136abcf70b7a2f6f505720640750557c4b33 # v3.1.1
        with:
          aqua_version: v2.43.1

      - name: Install Aqua on Windows
        if: ${{ startsWith(github.job, 'windows') || contains(github.workspace, ':\\') }}
        run: |
          $url = "https://github.com/aquaproj/aqua/releases/download/v2.48.2-0/aqua_windows_amd64.zip"
          $output = "aqua_windows_amd64.zip"
          $installPath = "$env:USERPROFILE\\aqua"
          
          # Remove existing directory if it exists
          if (Test-Path $installPath) {
            Remove-Item -Recurse -Force $installPath
          }
          
          Write-Host "Downloading Aqua from $url..."
          Invoke-WebRequest -Uri $url -OutFile $output
          
          Write-Host "Extracting Aqua to $installPath..."
          Expand-Archive -Path $output -DestinationPath $installPath -Force
          
          # Add the install path to the PATH environment variable
          Write-Host "Adding Aqua to PATH..."
          "$installPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          Set-Item Env:Path "$Env:LOCALAPPDATA\aquaproj-aqua\bin;$Env:Path"
          "$Env:LOCALAPPDATA\aquaproj-aqua\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
                    
          # Install using existing aqua.yaml or default config
          Write-Host "Installing Aqua packages..."
          try {
              aqua install --only-link
              Write-Host "Successfully installed packages using Aqua"
          } catch {
              Write-Host "Error installing packages: $_"
              Write-Host "Continuing with tests despite installation errors..."
              # Don't fail - we want to continue with tests
          }
        shell: powershell
  
      - name: Install YQ on Windows
        if: ${{ startsWith(github.job, 'windows') || contains(github.workspace, ':\\') }}
        run: |
          Write-Host "Installing yq on Windows..."
          $yqVersion = "v4.35.1"
          $yqUrl = "https://github.com/mikefarah/yq/releases/download/${yqVersion}/yq_windows_amd64.exe"
          
          # Create bin directory in GitHub workspace to store yq
          $binDir = Join-Path $env:GITHUB_WORKSPACE "bin"
          New-Item -Path $binDir -ItemType Directory -Force | Out-Null
          $yqPath = Join-Path $binDir "yq.exe"
          
          # Download yq
          Write-Host "Downloading yq from $yqUrl to $yqPath"
          Invoke-WebRequest -Uri $yqUrl -OutFile $yqPath
          
          # Add bin directory to PATH
          Write-Host "Adding $binDir to PATH"
          $env:PATH = "$binDir;$env:PATH"
          [Environment]::SetEnvironmentVariable("PATH", $env:PATH, "Process")
          
          # Add to GITHUB_PATH for subsequent steps
          Write-Host "$binDir" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Verify yq installation
          try {
              $yqVersion = (& $yqPath --version) 2>&1
              Write-Host "Successfully installed yq: $yqVersion"
          }
          catch {
              Write-Host "Error verifying yq installation: $_"
              exit 1
          }
        shell: powershell

      - name: Print Aqua Path
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const { execSync } = require('child_process');
            const os = require('os');
  
            try {
              const platform = os.platform();
              let aquaPathCommand = platform === 'win32' ? 'where aqua' : 'which aqua';
  
              console.log(`Checking Aqua path on ${platform}...`);
              const aquaPath = execSync(aquaPathCommand, { encoding: 'utf-8' }).trim();
              console.log(`Aqua path: ${aquaPath}`);
            } catch (error) {
              console.error('Error getting Aqua path:', error.message);
              // Don't exit the process, just log the error
              console.log('Continuing despite Aqua path issues...');
            }

      - name: Install Tools
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        env:
          AQUA_DISABLE_COSIGN: ${{ inputs.AQUA_DISABLE_COSIGN }}
          AQUA_DISABLE_SLSA: ${{ inputs.AQUA_DISABLE_SLSA }}
          AQUA_LOG_LEVEL: ${{ inputs.AQUA_LOG_LEVEL }}
        with:
          script: |
            const { execSync } = require('child_process');
            const os = require('os');
  
            try {
              const platform = os.platform();
              console.log(`Detected platform: ${platform}`);
  
              if (platform === 'linux' || platform === 'darwin' || platform === 'win32') {
                console.log('Installing tools using Aqua...');
                
                // Set environment variables to disable verification
                process.env.AQUA_DISABLE_COSIGN = 'true';
                process.env.AQUA_DISABLE_SLSA = 'true';
                process.env.AQUA_DISABLE_VERIFY = 'true';
                
                console.log('Installing with Aqua...');
                execSync('aqua install --only-link', { stdio: 'inherit' });
                console.log('Tools installed successfully.');
              } else {
                console.log('Tool installation is not supported on this platform.');
              }
            } catch (error) {
              console.error('Error installing tools:', error.message);
              // Don't fail the workflow - continue with tests
              console.log('Continuing with tests despite tool issues...');
            }
