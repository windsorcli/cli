name: 'RP: Build Artifacts'

on:
  repository_dispatch:
    types: [build-artifacts]

permissions:
  contents: write
  issues: read
  pull-requests: read  
jobs:
  build-artifacts:
    runs-on: ubuntu-latest
    steps:

      - name: Print out the inputs
        run: |
          echo "Repo Owner: ${{ github.event.client_payload.repo_owner }}"
          echo "Repo Name: ${{ github.event.client_payload.repo_name }}"
          echo "Release: ${{ github.event.client_payload.release }}"

  # build-and-test:
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, windows-latest, macos-latest]
  #       arch: [amd64, arm64]
  #       exclude:
  #         - os: windows-latest
  #           arch: arm64
  #   runs-on: ${{ matrix.os }}

  #   steps:
  #     - name: Determine Latest Release Branch
  #       id: get_latest_release_branch
  #       uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
  #       with:
  #         github-token: ${{ inputs.token }}
  #         script: |
  #           const releaseInput = '${{ inputs.release }}';
  #           const validFormat = /^(release-latest|release-[0-9]+\.[0-9]+\.[0-9]+|v?[0-9]+\.[0-9]+\.[0-9]+|[0-9]+\.[0-9]+\.[0-9]+)$/;

  #           if (!validFormat.test(releaseInput)) {
  #             throw new Error("Invalid release input. Please provide 'release-latest' or a version in the format 'release-x.y.z', 'v0.1.0', or '0.1.0'.");
  #           }

  #           let release;
  #           if (releaseInput === 'release-latest') {
  #             const { data: branches } = await github.rest.repos.listBranches({
  #               owner: '${{ inputs.repo_owner }}',
  #               repo: '${{ inputs.repo_name }}',
  #             });

  #             let releaseBranches = branches
  #               .map(branch => branch.name)
  #               .filter(name => name.startsWith('release-'))
  #               .sort((a, b) => a.localeCompare(b, undefined, { numeric: true }));

  #             const validReleaseBranchFormat = /^release-[0-9]+\.[0-9]+\.[0-9]+$/;
  #             const filteredReleaseBranches = releaseBranches.filter(branch => validReleaseBranchFormat.test(branch));
  #             releaseBranches = filteredReleaseBranches;

  #             release = releaseBranches.pop() || 'main';
  #           } else {
  #             release = releaseInput.startsWith('release-') ? releaseInput : `release-${releaseInput.replace(/^v/, '')}`;
  #           }

  #           const versionMatch = release.match(/^release-([0-9]+\.[0-9]+\.[0-9]+)$/) || release.match(/^v?([0-9]+\.[0-9]+\.[0-9]+)$/);
  #           if (!versionMatch) {
  #             if (release === 'main') {
  #               throw new Error("No release branch found. Please provide a valid release version.");
  #             }
  #             throw new Error(`Unexpected release format: ${release}`);
  #           }
                
  #           const version = versionMatch[1];
            
  #           console.log(`Latest Release Branch: ${release}`);
  #           console.log(`Version: ${version}`);

  #           core.setOutput('latest_release_branch', release);
  #           core.setOutput('version', version);

  #     - name: Checkout latest release branch
  #       uses: actions/checkout@v4.2.2
  #       with:
  #         ref: ${{ steps.get_latest_release_branch.outputs.latest_release_branch }}
                      
  #     - name: Install Aqua
  #       uses: aquaproj/aqua-installer@5e54e5cee8a95ee2ce7c04cb993da6dfad13e59c # v3.1.2
  #       with:
  #         aqua_version: v2.48.3

  #     - name: Install tools
  #       run: aqua install

  #     - name: Cache Go Modules
  #       uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
  #       with:
  #         path: |
  #           ~/.cache/go-build
  #           ~/go/pkg/mod
  #         key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
  #         restore-keys: |
  #           ${{ runner.os }}-go-
  
  #     - name: Install Dependencies
  #       run: go install ./...
          
  #     - name: Run tests
  #       run: task test

  #     - name: Test Build Windsor CLI on macOS/Linux
  #       if: ${{ matrix.os != 'windows-latest' }}
  #       run: |
  #         VERSION=$(echo "${GITHUB_REF}" | sed 's/refs\/heads\///' | sed 's/refs\/tags\///')
  #         echo "Testing build for version: $VERSION"
  #         COMMIT_SHA=${{ github.sha }}
  #         if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
  #           GOOS=linux GOARCH=${{ matrix.arch }} go build -ldflags "-X 'github.com/${{ github.repository }}/cmd.version=$VERSION' -X 'github.com/${{ github.repository }}/cmd.commitSHA=$COMMIT_SHA'" -o /dev/null cmd/windsor/main.go
  #         elif [ "${{ matrix.os }}" == "macos-latest" ]; then
  #           GOOS=darwin GOARCH=${{ matrix.arch }} go build -ldflags "-X 'github.com/${{ github.repository }}/cmd.version=$VERSION' -X 'github.com/${{ github.repository }}/cmd.commitSHA=$COMMIT_SHA'" -o /dev/null cmd/windsor/main.go
  #         fi

  #     - name: Test Build Windsor CLI on Windows
  #       if: ${{ matrix.os == 'windows-latest' }}
  #       run: |
  #         $env:VERSION = $env:GITHUB_REF -replace 'refs/heads/', '' -replace 'refs/tags/', ''
  #         echo "Testing build for version: $env:VERSION"
  #         $env:COMMIT_SHA = "${{ github.sha }}"
  #         $env:GOOS = "windows"
  #         $env:GOARCH = "${{ matrix.arch }}"
  #         go build -ldflags "-X 'github.com/${{ github.repository }}/cmd.version=$env:VERSION' -X 'github.com/${{ github.repository }}/cmd.commitSHA=$env:COMMIT_SHA'" -o NUL cmd\windsor\main.go
  #       shell: pwsh

  # release:
  #   runs-on: ubuntu-latest
  #   needs: [build-and-test]

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

  #     - name: Install GPG
  #       run: sudo apt-get update && sudo apt-get install -y gnupg

  #     - name: Install Aqua
  #       uses: aquaproj/aqua-installer@5e54e5cee8a95ee2ce7c04cb993da6dfad13e59c # v3.1.2
  #       with:
  #         aqua_version: v2.48.3

  #     - name: Install tools
  #       run: aqua install

  #     - name: Cache Go Modules
  #       uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
  #       with:
  #         path: |
  #           ~/.cache/go-build
  #           ~/go/pkg/mod
  #         key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
  #         restore-keys: |
  #           ${{ runner.os }}-go-
  
  #     - name: Install Dependencies
  #       run: go install ./...

  #     - name: Import GPG key
  #       id: import_gpg
  #       uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6.3.0
  #       with:
  #         gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
  #         passphrase: ${{ secrets.GPG_PASSPHRASE }}

  #     - name: Report GoReleaser Was about to run
  #       run: |
  #         echo "SUCCESS: GoRelease was about to run"

  #     # - name: Run GoReleaser
  #     #   uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552 # v6.3.0
  #     #   with:
  #     #     version: "~> v2"
  #     #     args: release --clean
  #     #   env:
  #     #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     #     GPG_FINGERPRINT: ${{ env.GPG_FINGERPRINT }}
  #     #     HOMEBREW_CLI_WRITE_PAT: ${{ secrets.HOMEBREW_CLI_WRITE_PAT }}
  #     #     GITHUB_SHA: ${{ github.sha }}
