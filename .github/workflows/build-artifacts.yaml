name: 'Build Artifacts'

on:
  workflow_dispatch:
    inputs:
      repo_owner:
        description: 'Repo Owner'
        required: false
        default: 'windsorcli'
      repo_name:
        description: 'Repo Name'
        required: false
        default: 'cli'
      release:
        description: 'Release'
        required: false        
        default: 'release-latest'
      token:
        description: 'Token'
        required: false
        default: ''
permissions:
  contents: write
  
jobs:
  build-artifacts:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [amd64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Install Tools
        uses: ./.github/actions/install-tools
        with:
          AQUA_DISABLE_COSIGN: true
          AQUA_DISABLE_SLSA: true
          AQUA_LOG_LEVEL: debug
        env:
          GITHUB_TOKEN: ${{ inputs.token != '' && inputs.token || secrets.WINDSORCLI_RELEASE_TOKEN }}  
          
      - name: Checkout target repository code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: ${{ inputs.repo_owner }}/${{ inputs.repo_name }}
          token: ${{ inputs.token != '' && inputs.token || secrets.WINDSORCLI_RELEASE_TOKEN }}
      - name: Print out the inputs
        run: |
          echo "Debugging inputs:"
          echo "Repo Owner: ${{ inputs.repo_owner }}"
          echo "Repo Name: ${{ inputs.repo_name }}"
          echo "Release: ${{ inputs.release }}"
        
      - name: Cache Go Modules
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install Dependencies
        run: go install ./...
      - name: Run tests
        run: task test
      - name: Test Build Windsor CLI on macOS/Linux
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          VERSION=$(echo "${GITHUB_REF}" | sed 's/refs\/heads\///' | sed 's/refs\/tags\///')
          echo "Testing build for version: $VERSION"
          COMMIT_SHA=${{ github.sha }}
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            GOOS=linux GOARCH=${{ matrix.arch }} go build -ldflags "-X 'github.com/${{ github.repository }}/cmd.version=$VERSION' -X 'github.com/${{ github.repository }}/cmd.commitSHA=$COMMIT_SHA'" -o /dev/null cmd/windsor/main.go
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            GOOS=darwin GOARCH=${{ matrix.arch }} go build -ldflags "-X 'github.com/${{ github.repository }}/cmd.version=$VERSION' -X 'github.com/${{ github.repository }}/cmd.commitSHA=$COMMIT_SHA'" -o /dev/null cmd/windsor/main.go
          fi

      - name: Test Build Windsor CLI on Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          $env:VERSION = $env:GITHUB_REF -replace 'refs/heads/', '' -replace 'refs/tags/', ''
          echo "Testing build for version: $env:VERSION"
          $env:COMMIT_SHA = "${{ github.sha }}"
          $env:GOOS = "windows"
          $env:GOARCH = "${{ matrix.arch }}"
          go build -ldflags "-X 'github.com/${{ github.repository }}/cmd.version=$env:VERSION' -X 'github.com/${{ github.repository }}/cmd.commitSHA=$env:COMMIT_SHA'" -o NUL cmd\windsor\main.go
        shell: pwsh

  release:
    runs-on: ubuntu-latest
    needs: [build-artifacts]

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: ${{ inputs.repo_owner }}/${{ inputs.repo_name }}
          token: ${{ inputs.token != '' && inputs.token || secrets.WINDSORCLI_RELEASE_TOKEN }}

      - name: Install Tools
        uses: ./.github/actions/install-tools
        with:
          AQUA_DISABLE_COSIGN: true
          AQUA_DISABLE_SLSA: true
          AQUA_LOG_LEVEL: debug
        env:
          GITHUB_TOKEN: ${{ inputs.token != '' && inputs.token || secrets.WINDSORCLI_RELEASE_TOKEN }}  
  
      - name: Cache Go Modules
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Dependencies
        run: go install ./...
        
      - name: Install GPG
        run: sudo apt-get update && sudo apt-get install -y gnupg

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6.3.0
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552 # v6.3.0
        with:
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ inputs.token != '' && inputs.token || secrets.WINDSORCLI_RELEASE_TOKEN }}
          GPG_FINGERPRINT: ${{ env.GPG_FINGERPRINT }}
          HOMEBREW_CLI_WRITE_PAT: ${{ secrets.HOMEBREW_CLI_WRITE_PAT }}
          GITHUB_SHA: ${{ github.sha }}
