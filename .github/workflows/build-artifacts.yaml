name: 'Build Artifacts'

on:
  workflow_dispatch:
    inputs:
      repo_owner:
        description: 'Repo Owner'
        required: false
        default: 'windsorcli'
      repo_name:
        description: 'Repo Name'
        required: false
        default: 'cli'
      release:
        description: 'Release'
        required: false        
        default: 'release-latest'
      token:
        description: 'Token'
        required: false
        default: ''
permissions:
  contents: write
jobs:
  build-artifacts:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [amd64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: ${{ inputs.repo_owner }}/${{ inputs.repo_name }}
          token: ${{ inputs.token != '' && inputs.token || secrets.WINDSORCLI_RELEASE_TOKEN }}
      - name: Print out the inputs
        run: |
          echo "Debugging inputs:"
          echo "Repo Owner: ${{ inputs.repo_owner }}"
          echo "Repo Name: ${{ inputs.repo_name }}"
          echo "Release: ${{ inputs.release }}"
      - name: Install Aqua
        if: runner.os != 'windows-latest'
        env: 
          AQUA_DISABLE_COSIGN: true
          AQUA_DISABLE_SLSA: true
          AQUA_LOG_LEVEL: info
        uses: aquaproj/aqua-installer@e2d0136abcf70b7a2f6f505720640750557c4b33 # v3.1.1
        with:
          aqua_version: v2.43.1
      - name: Install Aqua on Windows
        if: runner.os == 'windows-latest'
        run: |
          $url = "https://github.com/aquaproj/aqua/releases/download/v2.48.2-0/aqua_windows_amd64.zip"
          $output = "aqua_windows_amd64.zip"
          $installPath = "$env:USERPROFILE\\aqua"
          
          # Remove existing directory if it exists
          if (Test-Path $installPath) {
            Remove-Item -Recurse -Force $installPath
          }
          
          Write-Host "Downloading Aqua from $url..."
          Invoke-WebRequest -Uri $url -OutFile $output
          
          Write-Host "Extracting Aqua to $installPath..."
          Expand-Archive -Path $output -DestinationPath $installPath -Force
          
          # Add the install path to the PATH environment variable
          Write-Host "Adding Aqua to PATH..."
          "$installPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          Set-Item Env:Path "$Env:LOCALAPPDATA\aquaproj-aqua\bin;$Env:Path"
          "$Env:LOCALAPPDATA\aquaproj-aqua\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Set environment variables to disable verification
          $env:AQUA_DISABLE_COSIGN = "true"
          $env:AQUA_DISABLE_SLSA = "true"
          
          # Install using existing aqua.yaml or default config
          Write-Host "Installing Aqua packages..."
          try {
              aqua install --only-link
              Write-Host "Successfully installed packages using Aqua"
          } catch {
              Write-Host "Error installing packages: $_"
              Write-Host "Continuing with tests despite installation errors..."
              # Don't fail - we want to continue with tests
          }
        shell: powershell
  
      - name: Install YQ on Windows
        if: runner.os == 'windows-latest'
        run: |
          Write-Host "Installing yq on Windows..."
          $yqVersion = "v4.35.1"
          $yqUrl = "https://github.com/mikefarah/yq/releases/download/${yqVersion}/yq_windows_amd64.exe"
          
          # Create bin directory in GitHub workspace to store yq
          $binDir = Join-Path $env:GITHUB_WORKSPACE "bin"
          New-Item -Path $binDir -ItemType Directory -Force | Out-Null
          $yqPath = Join-Path $binDir "yq.exe"
          
          # Download yq
          Write-Host "Downloading yq from $yqUrl to $yqPath"
          Invoke-WebRequest -Uri $yqUrl -OutFile $yqPath
          
          # Add bin directory to PATH
          Write-Host "Adding $binDir to PATH"
          $env:PATH = "$binDir;$env:PATH"
          [Environment]::SetEnvironmentVariable("PATH", $env:PATH, "Process")
          
          # Add to GITHUB_PATH for subsequent steps
          Write-Host "$binDir" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Verify yq installation
          try {
              $yqVersion = (& $yqPath --version) 2>&1
              Write-Host "Successfully installed yq: $yqVersion"
          }
          catch {
              Write-Host "Error verifying yq installation: $_"
              exit 1
          }
        shell: powershell
      - name: Print Aqua Path
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const { execSync } = require('child_process');
            const os = require('os');
  
            try {
              const platform = os.platform();
              let aquaPathCommand = platform === 'win32' ? 'where aqua' : 'which aqua';
  
              console.log(`Checking Aqua path on ${platform}...`);
              const aquaPath = execSync(aquaPathCommand, { encoding: 'utf-8' }).trim();
              console.log(`Aqua path: ${aquaPath}`);
            } catch (error) {
              console.error('Error getting Aqua path:', error.message);
              // Don't exit the process, just log the error
              console.log('Continuing despite Aqua path issues...');
            }
      - name: Install Tools
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        env:
          AQUA_DISABLE_COSIGN: true
          AQUA_DISABLE_SLSA: true
          AQUA_LOG_LEVEL: debug
        with:
          script: |
            const { execSync } = require('child_process');
            const os = require('os');
  
            try {
              const platform = os.platform();
              console.log(`Detected platform: ${platform}`);
  
              if (platform === 'linux' || platform === 'darwin' || platform === 'win32') {
                console.log('Installing tools using Aqua...');
                
                // Set environment variables to disable verification
                process.env.AQUA_DISABLE_COSIGN = 'true';
                process.env.AQUA_DISABLE_SLSA = 'true';
                process.env.AQUA_DISABLE_VERIFY = 'true';
                
                console.log('Installing with Aqua...');
                execSync('aqua install --only-link', { stdio: 'inherit' });
                console.log('Tools installed successfully.');
              } else {
                console.log('Tool installation is not supported on this platform.');
              }
            } catch (error) {
              console.error('Error installing tools:', error.message);
              // Don't fail the workflow - continue with tests
              console.log('Continuing with tests despite tool issues...');
            }
      - name: Cache Go Modules
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install Dependencies
        run: go install ./...
      - name: Run tests
        run: task test
      - name: Test Build Windsor CLI on macOS/Linux
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          VERSION=$(echo "${GITHUB_REF}" | sed 's/refs\/heads\///' | sed 's/refs\/tags\///')
          echo "Testing build for version: $VERSION"
          COMMIT_SHA=${{ github.sha }}
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            GOOS=linux GOARCH=${{ matrix.arch }} go build -ldflags "-X 'github.com/${{ github.repository }}/cmd.version=$VERSION' -X 'github.com/${{ github.repository }}/cmd.commitSHA=$COMMIT_SHA'" -o /dev/null cmd/windsor/main.go
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            GOOS=darwin GOARCH=${{ matrix.arch }} go build -ldflags "-X 'github.com/${{ github.repository }}/cmd.version=$VERSION' -X 'github.com/${{ github.repository }}/cmd.commitSHA=$COMMIT_SHA'" -o /dev/null cmd/windsor/main.go
          fi

      - name: Test Build Windsor CLI on Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          $env:VERSION = $env:GITHUB_REF -replace 'refs/heads/', '' -replace 'refs/tags/', ''
          echo "Testing build for version: $env:VERSION"
          $env:COMMIT_SHA = "${{ github.sha }}"
          $env:GOOS = "windows"
          $env:GOARCH = "${{ matrix.arch }}"
          go build -ldflags "-X 'github.com/${{ github.repository }}/cmd.version=$env:VERSION' -X 'github.com/${{ github.repository }}/cmd.commitSHA=$env:COMMIT_SHA'" -o NUL cmd\windsor\main.go
        shell: pwsh

  release:
    runs-on: ubuntu-latest
    needs: [build-artifacts]

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: ${{ inputs.repo_owner }}/${{ inputs.repo_name }}
          token: ${{ inputs.token != '' && inputs.token || secrets.WINDSORCLI_RELEASE_TOKEN }}

      - name: Print out the inputs
        run: |
          echo "Debugging inputs:"
          echo "Repo Owner: ${{ inputs.repo_owner }}"
          echo "Repo Name: ${{ inputs.repo_name }}"
          echo "Release: ${{ inputs.release }}"

      - name: Install Aqua on Linux/macOS
        if: runner.os != 'windows-latest'
        env: 
          AQUA_DISABLE_COSIGN: true
          AQUA_DISABLE_SLSA: true
          AQUA_LOG_LEVEL: info
        uses: aquaproj/aqua-installer@e2d0136abcf70b7a2f6f505720640750557c4b33 # v3.1.1
        with:
          aqua_version: v2.43.1

      - name: Install Aqua on Windows
        if: runner.os == 'windows-latest'
        run: |
          $url = "https://github.com/aquaproj/aqua/releases/download/v2.48.2-0/aqua_windows_amd64.zip"
          $output = "aqua_windows_amd64.zip"
          $installPath = "$env:USERPROFILE\\aqua"
          
          # Remove existing directory if it exists
          if (Test-Path $installPath) {
            Remove-Item -Recurse -Force $installPath
          }
          
          Write-Host "Downloading Aqua from $url..."
          Invoke-WebRequest -Uri $url -OutFile $output
          
          Write-Host "Extracting Aqua to $installPath..."
          Expand-Archive -Path $output -DestinationPath $installPath -Force
          
          # Add the install path to the PATH environment variable
          Write-Host "Adding Aqua to PATH..."
          "$installPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          Set-Item Env:Path "$Env:LOCALAPPDATA\aquaproj-aqua\bin;$Env:Path"
          "$Env:LOCALAPPDATA\aquaproj-aqua\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Set environment variables to disable verification
          $env:AQUA_DISABLE_COSIGN = "true"
          $env:AQUA_DISABLE_SLSA = "true"
          
          # Install using existing aqua.yaml or default config
          Write-Host "Installing Aqua packages..."
          try {
              aqua install --only-link
              Write-Host "Successfully installed packages using Aqua"
          } catch {
              Write-Host "Error installing packages: $_"
              Write-Host "Continuing with tests despite installation errors..."
              # Don't fail - we want to continue with tests
          }
        shell: powershell
  
      - name: Install YQ on Windows
        if: runner.os == 'windows-latest'
        run: |
          Write-Host "Installing yq on Windows..."
          $yqVersion = "v4.35.1"
          $yqUrl = "https://github.com/mikefarah/yq/releases/download/${yqVersion}/yq_windows_amd64.exe"
          
          # Create bin directory in GitHub workspace to store yq
          $binDir = Join-Path $env:GITHUB_WORKSPACE "bin"
          New-Item -Path $binDir -ItemType Directory -Force | Out-Null
          $yqPath = Join-Path $binDir "yq.exe"
          
          # Download yq
          Write-Host "Downloading yq from $yqUrl to $yqPath"
          Invoke-WebRequest -Uri $yqUrl -OutFile $yqPath
          
          # Add bin directory to PATH
          Write-Host "Adding $binDir to PATH"
          $env:PATH = "$binDir;$env:PATH"
          [Environment]::SetEnvironmentVariable("PATH", $env:PATH, "Process")
          
          # Add to GITHUB_PATH for subsequent steps
          Write-Host "$binDir" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Verify yq installation
          try {
              $yqVersion = (& $yqPath --version) 2>&1
              Write-Host "Successfully installed yq: $yqVersion"
          }
          catch {
              Write-Host "Error verifying yq installation: $_"
              exit 1
          }
        shell: powershell
      - name: Print Aqua Path
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const { execSync } = require('child_process');
            const os = require('os');
  
            try {
              const platform = os.platform();
              let aquaPathCommand = platform === 'win32' ? 'where aqua' : 'which aqua';
  
              console.log(`Checking Aqua path on ${platform}...`);
              const aquaPath = execSync(aquaPathCommand, { encoding: 'utf-8' }).trim();
              console.log(`Aqua path: ${aquaPath}`);
            } catch (error) {
              console.error('Error getting Aqua path:', error.message);
              // Don't exit the process, just log the error
              console.log('Continuing despite Aqua path issues...');
            }

      - name: Install Tools
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        env:
          AQUA_DISABLE_COSIGN: true
          AQUA_DISABLE_SLSA: true
          AQUA_LOG_LEVEL: debug
        with:
          script: |
            const { execSync } = require('child_process');
            const os = require('os');
  
            try {
              const platform = os.platform();
              console.log(`Detected platform: ${platform}`);
  
              if (platform === 'linux' || platform === 'darwin' || platform === 'win32') {
                console.log('Installing tools using Aqua...');
                
                // Set environment variables to disable verification
                process.env.AQUA_DISABLE_COSIGN = 'true';
                process.env.AQUA_DISABLE_SLSA = 'true';
                process.env.AQUA_DISABLE_VERIFY = 'true';
                
                console.log('Installing with Aqua...');
                execSync('aqua install --only-link', { stdio: 'inherit' });
                console.log('Tools installed successfully.');
              } else {
                console.log('Tool installation is not supported on this platform.');
              }
            } catch (error) {
              console.error('Error installing tools:', error.message);
              // Don't fail the workflow - continue with tests
              console.log('Continuing with tests despite tool issues...');
            }

      - name: Cache Go Modules
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Dependencies
        run: go install ./...
        
      - name: Install GPG
        run: sudo apt-get update && sudo apt-get install -y gnupg

      # - name: Import GPG key
      #   id: import_gpg
      #   uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6.3.0
      #   with:
      #     gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
      #     passphrase: ${{ secrets.GPG_PASSPHRASE }}

      # - name: Report GoReleaser Was about to run
      #   run: |
      #     echo "SUCCESS: GoRelease was about to run"

      # - name: Run GoReleaser
      #   uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552 # v6.3.0
      #   with:
      #     version: "~> v2"
      #     args: release --clean
      #   env:
      #     GITHUB_TOKEN: ${{ inputs.token != '' && inputs.token || secrets.WINDSORCLI_RELEASE_TOKEN }}
      #     GPG_FINGERPRINT: ${{ env.GPG_FINGERPRINT }}
      #     HOMEBREW_CLI_WRITE_PAT: ${{ secrets.HOMEBREW_CLI_WRITE_PAT }}
      #     GITHUB_SHA: ${{ github.sha }}
