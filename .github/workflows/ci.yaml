name: CI

on:
  push:
    branches:
      - main
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [amd64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Aqua
        uses: aquaproj/aqua-installer@f13c5d2f0357708d85477aabe50fd3f725528745 # v3.1.0
        with:
          aqua_version: v2.42.2

      - name: Install tools using Aqua
        run: aqua install

      - name: Install Windsor CLI from Main Branch
        run: |
          git clone https://github.com/windsorcli/cli.git
          cd cli/cmd/windsor
          go build -o windsor
          chmod +x windsor
          ls -al
          ./windsor version
          cp windsor $HOME/.local/bin
          ls $HOME/.local/bin

      - name: Add Windsor to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run tests
        run: task test

      - name: Build Windsor CLI on macOS/Linux
        if: runner.os != 'Windows'
        run: |
          VERSION=$(echo "${GITHUB_REF}" | sed 's/refs\/heads\///' | sed 's/refs\/tags\///')
          echo "Building version: $VERSION"
          COMMIT_SHA=${{ github.sha }}
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            GOOS=linux GOARCH=${{ matrix.arch }} go build -ldflags "-X 'github.com/${{ github.repository }}/cmd.version=$VERSION' -X 'github.com/${{ github.repository }}/cmd.commitSHA=$COMMIT_SHA'" -o dist/windsor-linux-${{ matrix.arch }} cmd/windsor/main.go
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            GOOS=darwin GOARCH=${{ matrix.arch }} go build -ldflags "-X 'github.com/${{ github.repository }}/cmd.version=$VERSION' -X 'github.com/${{ github.repository }}/cmd.commitSHA=$COMMIT_SHA'" -o dist/windsor-darwin-${{ matrix.arch }} cmd/windsor/main.go
          fi

      - name: Build Windsor CLI on Windows
        if: runner.os == 'Windows'
        run: |
          $env:VERSION = $env:GITHUB_REF -replace 'refs/heads/', '' -replace 'refs/tags/', ''
          echo "Building version: $env:VERSION"
          $env:COMMIT_SHA = "${{ github.sha }}"
          $env:GOOS = "windows"
          $env:GOARCH = "${{ matrix.arch }}"
          go build -ldflags "-X 'github.com/${{ github.repository }}/cmd.version=$env:VERSION' -X 'github.com/${{ github.repository }}/cmd.commitSHA=$env:COMMIT_SHA'" -o dist/windsor.exe cmd/windsor/main.go
        shell: pwsh

      - name: Upload Release Asset on macOS/Linux
        if: startsWith(github.ref, 'refs/tags/v') && runner.os != 'Windows'
        run: |
          for file in dist/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              gh release upload "${GITHUB_REF#refs/tags/}" "$file" --clobber
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset on Windows
        if: startsWith(github.ref, 'refs/tags/v') && runner.os == 'Windows'
        run: |
          Get-ChildItem -Path dist\* | ForEach-Object {
            if ($_.PSIsContainer -eq $false) {
              Write-Host "Uploading $($_.FullName)"
              gh release upload "${{ github.ref_name }}" "$($_.FullName)" --clobber
            }
          }
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sast-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a # v5.2.0
        with:
          go-version: '1.23.1'
          check-latest: true

      - name: Run Gosec Security Scanner
        uses: securego/gosec@e0cca6fe95306b7e7790d6f1bf6a7bec6d622459 # v2.22.0
        with:
          args: ./...
        env:
          GOTOOLCHAIN: 'local'
          GOFLAGS: '-buildvcs=false'
