{
  "Main File": {
    "prefix": "snippet-main",
    "body": [
      "package ${1:packageName}",
      "",
      "import (",
      "    ${2:// imports}",
      ")",
      "",
      "// The ${3:ClassName} is a ${4:brief description}",
      "// It provides ${5:detailed explanation}",
      "// ${6:role in application}",
      "// ${7:key features/capabilities}",
      "",
      "// =============================================================================",
      "// Types",
      "// =============================================================================",
      "",
      "type ${3:ClassName} struct {",
      "    ${8:// fields}",
      "}",
      "",
      "// =============================================================================",
      "// Constructor",
      "// =============================================================================",
      "",
      "// New${3:ClassName} creates a new ${3:ClassName} instance",
      "func New${3:ClassName}(injector di.Injector) *${3:ClassName} {",
      "    return &${3:ClassName}{",
      "        ${9:// initialization}",
      "    }",
      "}",
      "",
      "// =============================================================================",
      "// Public Methods",
      "// =============================================================================",
      "",
      "// ${10:MethodName} ${11:description}",
      "func (c *${3:ClassName}) ${10:MethodName}() error {",
      "    ${12:// implementation}",
      "    return nil",
      "}"
    ],
    "description": "CLI main implementation file"
  },
  "Test File": {
    "prefix": "snippet-test",
    "body": [
      "package ${1:packageName}",
      "",
      "import (",
      "    \"testing\"",
      "    ${2:// other imports}",
      ")",
      "",
      "// =============================================================================",
      "// Test Setup",
      "// =============================================================================",
      "",
      "type Mocks struct {",
      "    ${3:// mock fields}",
      "}",
      "",
      "type SetupOptions struct {",
      "    ${4:// setup options}",
      "}",
      "",
      "func setupMocks(t *testing.T, opts ...*SetupOptions) *Mocks {",
      "    t.Helper()",
      "    ${5:// setup implementation}",
      "    return &Mocks{}",
      "}",
      "",
      "// =============================================================================",
      "// Test Public Methods",
      "// =============================================================================",
      "",
      "func Test${6:ComponentName}_${7:MethodName}(t *testing.T) {",
      "    setup := func(t *testing.T) (*${6:ComponentName}, *Mocks) {",
      "        t.Helper()",
      "        mocks := setupMocks(t)",
      "        obj := New${6:ComponentName}(mocks.Injector)",
      "        return obj, mocks",
      "    }",
      "",
      "    t.Run(\"${8:Success}\", func(t *testing.T) {",
      "        // Given ${9:context}",
      "        mocks, obj := setup(t)",
      "        ",
      "        // When ${10:action}",
      "        err := obj.${11:MethodName}()",
      "        ",
      "        // Then no error should occur",
      "        if err != nil {",
      "            t.Errorf(\"Expected success, got error: %v\", err)",
      "        }",
      "    })",
      "}"
    ],
    "description": "CLI test file with setup and test case"
  },
  "Mock File": {
    "prefix": "snippet-mock",
    "body": [
      "package ${1:packageName}",
      "",
      "import (",
      "    ${2:// imports}",
      ")",
      "",
      "// Mock${3:InterfaceName} is a mock implementation of the ${3:InterfaceName} interface",
      "type Mock${3:InterfaceName} struct {",
      "    ${4:MethodName}Func func() error",
      "    ${5:// other function fields}",
      "}",
      "",
      "// NewMock${3:InterfaceName} is a constructor for Mock${3:InterfaceName}",
      "func NewMock${3:InterfaceName}() *Mock${3:InterfaceName} {",
      "    return &Mock${3:InterfaceName}{}",
      "}",
      "",
      "// ${4:MethodName} calls the mock ${4:MethodName}Func if set, otherwise returns nil",
      "func (m *Mock${3:InterfaceName}) ${4:MethodName}() error {",
      "    if m.${4:MethodName}Func != nil {",
      "        return m.${4:MethodName}Func()",
      "    }",
      "    return nil",
      "}",
      "",
      "// Ensure Mock${3:InterfaceName} implements ${3:InterfaceName}",
      "var _ ${3:InterfaceName} = (*Mock${3:InterfaceName})(nil)"
    ],
    "description": "CLI mock implementation file"
  },
  "Section Header": {
    "prefix": "snippet-section",
    "body": [
      "// =============================================================================",
      "// ${1:SECTION NAME}",
      "// ============================================================================="
    ],
    "description": "CLI section header format"
  },
  "Test Case": {
    "prefix": "snippet-test-case",
    "body": [
      "t.Run(\"${1:Scenario}\", func(t *testing.T) {",
      "    // Given ${2:context}",
      "    mocks, obj := setup(t)",
      "    ",
      "    // When ${3:action}",
      "    err := obj.${4:MethodName}()",
      "    ",
      "    // Then ${5:result}",
      "    if err != nil {",
      "        t.Errorf(\"Expected success, got error: %v\", err)",
      "    }",
      "})"
    ],
    "description": "CLI test case with BDD style"
  }
}